{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eunyo\\\\fork_repository\\\\ChatBot\\\\chatbot\\\\src\\\\UnderBar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { AiOutlineArrowUp } from 'react-icons/ai';\nimport './UnderBar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction UnderBar() {\n  _s();\n\n  // 채팅 로그가 투두 리스르 생성 기능과 비슷하다고 느껴서\n  // \"리액트를 다루는 기술\" 책에 있는 투두 리스트에서 코드를 가져왔다.\n  // 초기 챗 리스트는 공란이다.\n  const [doChat, setDoChat] = useState(\"\"); // 초키 챗 리스트는 요소가 없는, 비어있는 배열이다.\n\n  const [doChats, setDoChats] = useState([]);\n  /**\r\n   * onChange 이벤트를 정의한다.\r\n   * 이벤트가 일어나면,\r\n   * setDoChat의 value 값을 가져온다.\r\n   * \"event.target\" 이걸 \"event\", \"target\" 이렇게 각각 해석하는 게 아니라,\r\n   * 한 뭉텅이로 봐야한다.\r\n   * 해당요소를 가져오려면 저렇게 접근하는 것이다.\r\n   */\n\n  const onChange = event => setDoChat(event.target.value);\n  /**\r\n   * onSumbit 이벤트가 일어나면,\r\n   * \r\n   */\n\n\n  const onSubmit = event => {\n    /**\r\n     * a, submit 태그는 클릭 시 href를 통해 이동하거나, 창이 새로고침된다.\r\n     * submit 버튼을 클릭해도 새로고침하지 않으려면 preventDefault()를 사용한다.         * \r\n     * 출처: https://programming119.tistory.com/100\r\n     */\n    event.preventDefault(); // toChat이 공란이라면 그대로 리턴한다. 리스트에 추가하지 않는 것이다.\n\n    if (doChat === \"\") {\n      return;\n    }\n    /*\r\n    * ... 의 역할은 무엇인가?\r\n    * currentArray 를 가져온다는 것이다.\r\n    * 아래 코드는 기존 currentArray 에 ToDo를 새로운 인덱스로 넣어서\r\n    * 새로운 array를 만드는 코드이다.\r\n    * 출처: https://devdongbaek.tistory.com/41\r\n    */\n    // doChats의 currentArray 에 toDo 를 새로운 인덱스로 넣는다.\n\n\n    setDoChats(currentArray => [doChat, ...currentArray]); // doChat을 공란으로 돌려준다.\n\n    setDoChat(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [doChats.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: item\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }, this)), \".\", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"underBar\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: onSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"chat\",\n          type: \"text\",\n          value: doChat,\n          placeholder: \"\\uCC44\\uD305\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n          onChange: onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AiOutlineArrowUp, {\n        className: \"btnEnter\",\n        onClick: onSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(UnderBar, \"XF1fnN+4+rFfMTI4bl9gvZVkjjg=\");\n\n_c = UnderBar;\nexport default UnderBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"UnderBar\");","map":{"version":3,"sources":["C:/Users/eunyo/fork_repository/ChatBot/chatbot/src/UnderBar.js"],"names":["React","useState","AiOutlineArrowUp","UnderBar","doChat","setDoChat","doChats","setDoChats","onChange","event","target","value","onSubmit","preventDefault","currentArray","map","item","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,gBAAT,QAAiC,gBAAjC;AACA,OAAO,gBAAP;;;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAChB;AACA;AACA;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,EAAD,CAApC,CAJgB,CAKhB;;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,EAAD,CAAtC;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,QAAMO,QAAQ,GAAIC,KAAD,IAAWJ,SAAS,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAArC;AACA;AACJ;AACA;AACA;;;AACI,QAAMC,QAAQ,GAAIH,KAAD,IAAW;AACxB;AACR;AACA;AACA;AACA;AACQA,IAAAA,KAAK,CAACI,cAAN,GANwB,CAOxB;;AACA,QAAIT,MAAM,KAAK,EAAf,EAAmB;AACf;AACH;AACD;AACR;AACA;AACA;AACA;AACA;AACA;AACQ;;;AACAG,IAAAA,UAAU,CAAEO,YAAD,IAAkB,CAACV,MAAD,EAAS,GAAGU,YAAZ,CAAnB,CAAV,CAnBwB,CAoBxB;;AACAT,IAAAA,SAAS,CAAC,EAAD,CAAT;AACH,GAtBD;;AAuBA,sBACI;AAAA,eAKSC,OAAO,CAACS,GAAR,CAAY,CAACC,IAAD,EAAOC,KAAP,kBACT;AAAA,gBAAiBD;AAAjB,OAASC,KAAT;AAAA;AAAA;AAAA;AAAA,YADH,CALT,oBAUI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BACI;AAAM,QAAA,QAAQ,EAAEL,QAAhB;AAAA,+BACI;AACI,UAAA,SAAS,EAAC,MADd;AAEI,UAAA,IAAI,EAAC,MAFT;AAGI,UAAA,KAAK,EAAER,MAHX;AAII,UAAA,WAAW,EAAC,mDAJhB;AAKI,UAAA,QAAQ,EAAEI;AALd;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAUI,QAAC,gBAAD;AAAkB,QAAA,SAAS,EAAC,UAA5B;AAAuC,QAAA,OAAO,EAAEI;AAAhD;AAAA;AAAA;AAAA;AAAA,cAVJ,eAWI;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA,kBADJ;AA0BH;;GAtEQT,Q;;KAAAA,Q;AAyET,eAAeA,QAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { AiOutlineArrowUp } from 'react-icons/ai';\r\nimport './UnderBar.css';\r\n\r\nfunction UnderBar() {\r\n    // 채팅 로그가 투두 리스르 생성 기능과 비슷하다고 느껴서\r\n    // \"리액트를 다루는 기술\" 책에 있는 투두 리스트에서 코드를 가져왔다.\r\n    // 초기 챗 리스트는 공란이다.\r\n    const [doChat, setDoChat] = useState(\"\");\r\n    // 초키 챗 리스트는 요소가 없는, 비어있는 배열이다.\r\n    const [doChats, setDoChats] = useState([]);\r\n\r\n    /**\r\n     * onChange 이벤트를 정의한다.\r\n     * 이벤트가 일어나면,\r\n     * setDoChat의 value 값을 가져온다.\r\n     * \"event.target\" 이걸 \"event\", \"target\" 이렇게 각각 해석하는 게 아니라,\r\n     * 한 뭉텅이로 봐야한다.\r\n     * 해당요소를 가져오려면 저렇게 접근하는 것이다.\r\n     */\r\n    const onChange = (event) => setDoChat(event.target.value);\r\n    /**\r\n     * onSumbit 이벤트가 일어나면,\r\n     * \r\n     */\r\n    const onSubmit = (event) => {\r\n        /**\r\n         * a, submit 태그는 클릭 시 href를 통해 이동하거나, 창이 새로고침된다.\r\n         * submit 버튼을 클릭해도 새로고침하지 않으려면 preventDefault()를 사용한다.         * \r\n         * 출처: https://programming119.tistory.com/100\r\n         */\r\n        event.preventDefault();\r\n        // toChat이 공란이라면 그대로 리턴한다. 리스트에 추가하지 않는 것이다.\r\n        if (doChat === \"\") {\r\n            return;\r\n        }\r\n        /*\r\n        * ... 의 역할은 무엇인가?\r\n        * currentArray 를 가져온다는 것이다.\r\n        * 아래 코드는 기존 currentArray 에 ToDo를 새로운 인덱스로 넣어서\r\n        * 새로운 array를 만드는 코드이다.\r\n        * 출처: https://devdongbaek.tistory.com/41\r\n        */\r\n        // doChats의 currentArray 에 toDo 를 새로운 인덱스로 넣는다.\r\n        setDoChats((currentArray) => [doChat, ...currentArray]);\r\n        // doChat을 공란으로 돌려준다.\r\n        setDoChat(\"\");\r\n    }\r\n    return (\r\n        <>\r\n            {/* 챗 리스트가 상하단 바 사이에 생성이 된다. */}\r\n                {/* \r\n                매핑을 한다.\r\n                */}\r\n                {doChats.map((item, index) => (\r\n                    <li key={index}>{item}</li>\r\n                ))}.\r\n\r\n            {/* 언더바 레이아웃 및 이벤트 등록 */}\r\n            <div className=\"underBar\">\r\n                <form onSubmit={onSubmit}>\r\n                    <input\r\n                        className=\"chat\"\r\n                        type=\"text\"\r\n                        value={doChat}\r\n                        placeholder=\"채팅을 입력하세요\"\r\n                        onChange={onChange}\r\n                    />\r\n                </form>\r\n                <AiOutlineArrowUp className=\"btnEnter\" onClick={onSubmit} />\r\n                <hr />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default UnderBar;"]},"metadata":{},"sourceType":"module"}